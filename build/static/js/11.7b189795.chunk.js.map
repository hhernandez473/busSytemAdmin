{"version":3,"sources":["Demo/RegisterBus/registerBus.js","services/control.service.js"],"names":["RegisterBus","handleChange","e","formObj","target","name","value","state","form","formErrors","setState","Object","keys","includes","formErrorsObj","errorMsg","validateField","test","validateForm","validateFunc","errorObj","forEach","x","msg","handleSubmit","length","driverAssigned","licensePlates","controlService","post","then","res","toast","success","catch","error","data","console","log","getBuses","get","busList","buses","editBus","bus","_id","btn","busID","busModify","put","cleanForm","JSON","stringify","errors","busDelete","del","warning","userList","getUserList","users","uid","this","Body","md","striped","bordered","hover","size","map","i","key","className","onClick","Group","Label","Control","type","placeholder","onChange","onBlur","controlId","sm","as","index","variant","disabled","closeButton","position","React","Component","ControlService","url","api","body","delete"],"mappings":"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","file":"static/js/11.7b189795.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Card, Form, Button, Table } from 'react-bootstrap';\r\nimport '../RegisterBus/index.scss';\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport controlService from '../../services/control.service';\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nclass RegisterBus extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            form: {\r\n                licensePlates: \"\",\r\n                //route: null,\r\n                driverAssigned: null,\r\n                busID: 0\r\n            },\r\n            formErrors: {\r\n                licensePlates: null,\r\n                //route: null,\r\n                driverAssigned: null\r\n            },\r\n            userList: [],\r\n            busList: [],\r\n            btn: false\r\n        };\r\n\r\n        this.getUserList();\r\n        this.getBuses();\r\n    }\r\n\r\n    handleChange = e => {\r\n        const { name, value } = e.target;\r\n        const { form, formErrors } = this.state;\r\n\r\n        let formObj = {};\r\n\r\n        formObj = {\r\n            ...form,\r\n            [name]: value\r\n        };\r\n\r\n        this.setState({ form: formObj }, () => {\r\n            if (!Object.keys(formErrors).includes(name)) return;\r\n            let formErrorsObj = {};\r\n\r\n            const errorMsg = this.validateField(name, value);\r\n            formErrorsObj = { ...formErrors, [name]: errorMsg };\r\n            this.setState({ formErrors: formErrorsObj });\r\n        });\r\n    }\r\n\r\n    validateField = (name, value) => {\r\n        let errorMsg = null;\r\n        switch (name) {\r\n            case \"licensePlates\":\r\n                let patronPlaca = /^(C|P)+[A-Z0-9]{6}$/;\r\n                if (!value) errorMsg = \"Ingrese número de placa,\";\r\n                if (!patronPlaca.test(value)) errorMsg = \"Número de placa incorrecto, Ejemplo: C123ABC\";\r\n                break;\r\n\r\n\r\n\r\n            case \"driverAssigned\":\r\n                if (!value) errorMsg = \"Seleccione un conductor\";\r\n                break;\r\n            default: errorMsg = null;\r\n        }\r\n        return errorMsg;\r\n    }\r\n\r\n    validateForm = (form, formErrors, validateFunc) => {\r\n        const errorObj = {};\r\n        const validate = Object.keys(formErrors);\r\n        validate.forEach(x => {\r\n            const msg = validateFunc(x, form[x]);\r\n            if (msg) errorObj[x] = msg;\r\n        });\r\n        return errorObj;\r\n    };\r\n\r\n    handleSubmit = () => {\r\n        const { form, formErrors } = this.state;\r\n        const errorObj = this.validateForm(form, formErrors, this.validateField);\r\n        if (Object.keys(errorObj).length !== 0) {\r\n            this.setState({ formErrors: { ...formErrors, ...errorObj } });\r\n            return false;\r\n        }\r\n        const { driverAssigned, licensePlates } = form;\r\n        controlService.post(\"/bus\", { driverAssigned, licensePlates }).then((res) => {\r\n            toast.success(\"Bus creado correctamente.\");\r\n        }).catch(error => {\r\n            toast.error(error.data.msg);\r\n        });\r\n        console.log(\"Data: \", form);\r\n    };\r\n\r\n    getUserList() {\r\n        controlService.get(\"/usuarios\").then((res) => {\r\n            this.setState({ userList: res.data.users, form: { driverAssigned: res.data.users[0].uid } });\r\n\r\n\r\n        }).catch(error => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    getBuses = () => {\r\n        controlService.get(\"/bus\").then((res) => {\r\n            this.setState({ busList: res.data.buses });\r\n\r\n\r\n        }).catch(error => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    editBus = (bus) => {\r\n        const { _id, driverAssigned, licensePlates } = bus;\r\n        this.setState({\r\n            btn: true,\r\n            form: {\r\n                busID: _id,\r\n                driverAssigned: driverAssigned._id,\r\n                licensePlates\r\n            }\r\n        })\r\n    }\r\n\r\n    busModify = () => {\r\n        const { form, formErrors } = this.state;\r\n        const errorObj = this.validateForm(form, formErrors, this.validateField);\r\n        if (Object.keys(errorObj).length !== 0) {\r\n            this.setState({ formErrors: { ...formErrors, ...errorObj } });\r\n            return false;\r\n        }\r\n        const { driverAssigned, licensePlates, busID } = form;\r\n        controlService.put(`/bus/${busID}`, { driverAssigned, licensePlates }).then((res) => {\r\n            toast.success(\"Bus modifcado correctamente.\");\r\n            this.cleanForm();\r\n        }).catch(error => {\r\n            toast.error(JSON.stringify(error.data.errors, null, 2));\r\n        });\r\n    }\r\n\r\n    busDelete = (bus) => {\r\n\r\n\r\n        controlService.del(`/bus/${bus._id}`).then((res) => {\r\n            toast.warning(\"Bus Eliminado correctamente.\");\r\n            this.cleanForm();\r\n        }).catch(error => {\r\n            toast.error(JSON.stringify(error.data.errors, null, 2));\r\n        });\r\n    }\r\n\r\n\r\n\r\n    cleanForm = () => {\r\n        this.setState({\r\n            btn: false,\r\n            form: {\r\n                busID: 0,\r\n                driverAssigned: \"\",\r\n                licensePlates: \"\"\r\n            }\r\n        });\r\n        this.getBuses();\r\n    }\r\n\r\n    render() {\r\n        const { form, formErrors } = this.state;\r\n        return (\r\n            <>\r\n                <Aux>\r\n                    <Row>\r\n                        <Col>\r\n                            <Card>\r\n\r\n                                <Card.Body>\r\n\r\n                                    <hr />\r\n                                    <Row>\r\n                                        <Col md={12}>\r\n\r\n                                            <Table striped bordered hover size=\"sm\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th>#</th>\r\n                                                        <th>Placa</th>\r\n                                                        <th>Conductor</th>\r\n                                                        <th>Editar</th>\r\n                                                        <th>Eliminar</th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {\r\n                                                        this.state.busList.map((bus, i) => (\r\n                                                            <tr key={i}>\r\n                                                                <td key={i + 1}>{i + 1}</td>\r\n                                                                <td key={bus._id}>{bus.licensePlates}</td>\r\n                                                                <td key={bus.driverAssigned.name}>{bus.driverAssigned.name}</td>\r\n                                                                <td><i className=\"material-icons btn btn-warning\"\r\n                                                                    onClick={() => this.editBus(bus)}>edit</i>\r\n                                                                </td>\r\n                                                                <td><i className=\"material-icons btn btn-danger\"\r\n                                                                    onClick={() => this.busDelete(bus)}>delete</i>\r\n                                                                </td>\r\n                                                            </tr>\r\n                                                        ))\r\n                                                    }\r\n                                                </tbody>\r\n                                            </Table>\r\n                                        </Col>\r\n\r\n                                    </Row>\r\n                                    <Row>\r\n\r\n                                        <Col md={3}>\r\n\r\n                                            <Form.Group >\r\n                                                <Form.Label>Número de Placa</Form.Label>\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    placeholder=\"placa\"\r\n                                                    name=\"licensePlates\"\r\n                                                    value={form.licensePlates}\r\n                                                    onChange={this.handleChange}\r\n                                                    onBlur={this.handleChange} />\r\n\r\n                                                {formErrors.licensePlates && (\r\n                                                    <span className=\"err\">{formErrors.licensePlates}</span>\r\n                                                )}\r\n                                            </Form.Group>\r\n\r\n                                        </Col>\r\n\r\n                                        <Col md={3}>\r\n\r\n                                            <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n                                                <Form.Label>Conductor Responsable</Form.Label>\r\n                                                <Col sm=\"8\">\r\n                                                    <Form.Control as=\"select\"\r\n                                                        name=\"driverAssigned\"\r\n                                                        onChange={\r\n                                                            this.handleChange\r\n                                                        } >\r\n                                                        {this.state.userList.map(({ uid, name }, index) =>\r\n                                                            <option value={uid} key={index} > {name} </option>\r\n                                                        )}\r\n\r\n                                                    </Form.Control>\r\n                                                    {formErrors.driverAssigned && (\r\n                                                        <span className=\"err\">{formErrors.driverAssigned}</span>\r\n                                                    )}\r\n                                                </Col>\r\n                                            </Form.Group>\r\n\r\n                                        </Col>\r\n                                        <Col md={6}>\r\n                                            <Button variant=\"success\" className=\"mt-4\" onClick={this.handleSubmit} disabled={this.state.btn}>\r\n                                                Guardar\r\n                                            </Button>\r\n                                            <Button variant=\"warning\" className=\"mt-4\" onClick={this.busModify} disabled={!this.state.btn} >\r\n                                                Editar\r\n                                            </Button>\r\n                                            <Button variant=\"secondary\" className=\"mt-4\" onClick={this.cleanForm}  >\r\n                                                Limpiar\r\n                                            </Button>\r\n                                        </Col>\r\n\r\n                                    </Row>\r\n                                </Card.Body>\r\n                            </Card>\r\n\r\n                        </Col>\r\n                        <ToastContainer closeButton={false} position=\"bottom-right\" />\r\n                    </Row>\r\n\r\n                </Aux>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RegisterBus;\r\n","import api from './api';\r\n\r\nclass ControlService {\r\n    //get services\r\n    get( url ) {\r\n        return api.get(url);\r\n    }\r\n\r\n    //post services\r\n    post( url, body ) {\r\n        return api.post( url, body );\r\n    }\r\n\r\n    //put services\r\n    put( url, body ) {\r\n        return api.put( url, body );\r\n    }\r\n\r\n    //put services\r\n    del( url ) {\r\n        return api.delete( url );\r\n    }\r\n\r\n}\r\n\r\nexport default new ControlService();"],"sourceRoot":""}