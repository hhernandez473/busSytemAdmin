{"version":3,"sources":["Demo/Schedule/Table.js","Demo/Schedule/tableData.js","Demo/Schedule/TableForm.js","Demo/Schedule/schedule.js","services/control.service.js"],"names":["Table2","data","headers","handleRemove","startEditing","editIdx","handleChange","stopEditing","className","scope","map","h","i","key","name","r","currentlyEditing","k","prop","Form","Control","as","onChange","e","userList","res","index","value","JSON","stringify","type","onClick","row","TableForm","state","departureTime","returnTime","driverAssigned","errors","validateFields","iserror","push","setState","handleInputChange","target","parse","createRow","preventDefault","newItem","props","addRow","currentTarget","reset","getUserList","createSchedule","console","log","controlService","get","then","users","catch","error","Row","Col","this","role","onSubmit","autoComplete","Group","controlId","Label","column","sm","md","placeholder","React","Component","RegisterSchedule","userList2","routeList","scheduleList","btn","scheduleId","item","prevState","nextState","filter","j","setRoute","route","detail","d","uid","length","find","n","toast","post","success","msg","editSchedules","schedule","editList","s","_id","getdriverAssigned","id","user","scheduleModify","put","cleanForm","scheduleDel","del","warning","getSchedules","getRoutes","schedules","Card","Body","Table","striped","bordered","hover","size","Button","variant","disabled","closeButton","position","ControlService","url","api","body","delete"],"mappings":"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","file":"static/js/12.581ae63b.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../Schedule/index.scss';\r\nimport { Form } from 'react-bootstrap';\r\nconst row = (r, i, headers, handleRemove, startEditing, editIdx, handleChange, stopEditing) => {\r\n  \r\n  const currentlyEditing = editIdx === i\r\n\r\n  return (\r\n\r\n    <tr key={`tr-${i}`}>\r\n      <td>{i}</td>\r\n      {headers.map((h, k) => (\r\n        <td key={`td-${k}`}>\r\n          {currentlyEditing ?\r\n            h.prop == 'driverAssigned' ?\r\n              <Form.Control as=\"select\"\r\n                name=\"driverAssigned\"\r\n                onChange={\r\n                  (e) => handleChange(e, h.prop, i)\r\n                } >\r\n                {r.userList.map((res, index) =>\r\n                  <option value={JSON.stringify(res)} key={index} > {res.name} </option>\r\n                )}\r\n\r\n              </Form.Control>\r\n              :\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                onChange={(e) => handleChange(e, h.prop, i)}\r\n                name={h.prop}\r\n                value={r[h.prop]}\r\n              />\r\n            :\r\n            h.prop == 'driverAssigned'\r\n              ?\r\n              r[h.prop].name\r\n              :\r\n              r[h.prop]\r\n          }\r\n        </td>\r\n      ))}\r\n\r\n      {currentlyEditing ?\r\n        <td><i className=\"material-icons\"\r\n          onClick={() => stopEditing(i)}>check_circle</i>\r\n        </td> :\r\n\r\n        <td><i className=\"material-icons\"\r\n          onClick={() => startEditing(i)}>edit</i>\r\n        </td>}\r\n\r\n      <td><i className=\"material-icons\"\r\n        onClick={() => handleRemove(i)}>delete</i>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\n\r\n\r\nconst Table2 = ({ data, headers, handleRemove, startEditing, editIdx, handleChange, stopEditing }) => (\r\n  < div >\r\n    <div className=\"card \">\r\n      <table className=\"table sizeTable \">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            {headers.map((h, i) =>\r\n              <th key={`th-${i}`} scope=\"col\">{h.name}</th>\r\n            )}\r\n            <th scope=\"col\"></th>\r\n            <th scope=\"col\"></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody >\r\n          {data.map((r, i) =>\r\n            row(r, i, headers,\r\n              handleRemove,\r\n              startEditing,\r\n              editIdx,\r\n              handleChange,\r\n              stopEditing\r\n            ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div >\r\n)\r\n\r\n\r\nexport default Table2\r\n\r\n\r\n","const headers = [\r\n    {\r\n        name: 'Conductor',\r\n        prop: 'driverAssigned'\r\n    },\r\n    {\r\n        name: 'Hora de Salida',\r\n        prop: 'departureTime'\r\n    },\r\n    {\r\n        name: 'Hora de Retorno',\r\n        prop: 'returnTime'\r\n    },\r\n]\r\nexport default headers","import React from 'react';\r\nimport { Row, Col, Form } from 'react-bootstrap';\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport controlService from '../../services/control.service';\r\nclass TableForm extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.getUserList();\r\n    }\r\n\r\n\r\n\r\n    state = {\r\n        departureTime: '',\r\n        returnTime: '',\r\n        driverAssigned: '',\r\n        userList: [],\r\n        errors: ''\r\n    };\r\n\r\n    validateFields = () => {\r\n        let iserror = false\r\n        const errors = []\r\n\r\n        if (!this.state.departureTime) {\r\n            iserror = true\r\n            errors.push('La hora de salida es requerida')\r\n        }\r\n        if (!this.state.returnTime) {\r\n            iserror = true\r\n            errors.push('La hora de retorno es requerida')\r\n        }\r\n        if (iserror) {\r\n            this.setState({ errors })\r\n        }\r\n\r\n        return iserror\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n        const { value } = e.target\r\n        const name = e.target.name\r\n        \r\n        this.setState({\r\n            [name]: (name == 'driverAssigned')?JSON.parse(value): value\r\n        })\r\n    }\r\n\r\n    createRow = (e) => {\r\n        e.preventDefault();\r\n        const { name } = this.state;\r\n        const newItem = this.state\r\n        const er = this.validateFields()\r\n        if (!er) {\r\n            this.props.addRow(newItem)\r\n            this.setState({\r\n                departureTime: '',\r\n                returnTime: '',\r\n                driverAssigned: '',\r\n                name: name,\r\n                errors: ''\r\n            })\r\n            e.currentTarget.reset()\r\n            this.getUserList();\r\n        }\r\n    }\r\n\r\n    createSchedule = (e) => {\r\n        e.preventDefault();\r\n\r\n        const newItem = this.state\r\n        e.currentTarget.reset();\r\n        this.getUserList();\r\n        console.log(newItem);\r\n    }\r\n\r\n    getUserList() {\r\n        controlService.get(\"/usuarios\").then((res) => {\r\n            this.setState({ userList: res.data.users, driverAssigned: res.data.users[0] });\r\n\r\n\r\n        }).catch(error => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Aux>\r\n\r\n                    <Row>\r\n                        <Col>\r\n\r\n                            {this.state.errors &&\r\n                                <div className=\"alert alert-warning\" role=\"alert\">\r\n                                    {this.state.errors.map(e => <li>{e}</li>)}\r\n                                </div>\r\n                            }\r\n                            <form onSubmit={this.createRow} autoComplete=\"off\" >\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group as={Row} controlId=\"exampleForm.ControlSelect1\">\r\n                                            <Form.Label column sm=\"4\">Conductores</Form.Label>\r\n                                            <Col sm=\"8\">\r\n                                                <Form.Control as=\"select\"\r\n                                                    name=\"driverAssigned\"\r\n                                                    onChange={\r\n                                                        this.handleInputChange\r\n                                                    } >\r\n                                                    {this.state.userList.map((res, index) =>\r\n                                                        <option value={JSON.stringify(res)} key={index} > {res.name} </option>\r\n                                                    )}\r\n\r\n                                                </Form.Control>\r\n                                            </Col>\r\n\r\n\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col md={4}>\r\n                                        <input type=\"text\"\r\n                                            onChange={this.handleInputChange}\r\n                                            className=\"form-control\"\r\n                                            placeholder=\"Hora salida\"\r\n                                            name=\"departureTime\" />\r\n                                    </Col>\r\n                                    <Col md={4}>\r\n                                        <input type=\"text\"\r\n                                            onChange={this.handleInputChange}\r\n                                            className=\"form-control\"\r\n                                            placeholder=\"Hora retorno\"\r\n                                            name=\"returnTime\" />\r\n                                    </Col>\r\n                                    <Col md={4}>\r\n                                        <button type=\"submit\"\r\n                                            className=\"btn-block btn btn-raised btn-primary\">\r\n                                            Agregar\r\n                                        </button>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                            </form>\r\n\r\n\r\n\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </Aux>\r\n\r\n            </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default TableForm\r\n\r\n\r\n","import React from 'react';\r\nimport { Row, Col, Card, Form, Button, Table } from 'react-bootstrap';\r\n\r\nimport controlService from '../../services/control.service';\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Table2 from './Table';\r\nimport headers from './tableData';\r\nimport TableForm from './TableForm';\r\n\r\nclass RegisterSchedule extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.getRoutes();\r\n        this.getSchedules();\r\n        this.getUserList();\r\n    }\r\n\r\n\r\n\r\n    state = {\r\n        data: [],\r\n        headers: headers,\r\n        editIdx: -1,\r\n        userList2: [],\r\n        routeList: [],\r\n        scheduleList: [], \r\n        btn: false,\r\n        scheduleId: 0\r\n\r\n    };\r\n\r\n\r\n\r\n    addRow = (item) => {\r\n        const prevState = this.state.data\r\n        const nextState = [...prevState, item]\r\n        this.setState({\r\n            data: nextState\r\n        })\r\n\r\n    }\r\n\r\n    handleRemove = (i) => {\r\n        this.setState({\r\n            data: this.state.data.filter((item, j) => {\r\n                return j !== i\r\n            })\r\n        })\r\n    }\r\n\r\n    startEditing = (i) => {\r\n        this.setState({ editIdx: i })\r\n    }\r\n\r\n    stopEditing = (i) => {\r\n        this.setState({ editIdx: -1 })\r\n    }\r\n\r\n    handleChange = (e, name, i) => {\r\n        const { value } = e.target\r\n        this.setState({\r\n            data: this.state.data.map(\r\n                (row, j) => (j === i ? { ...row, [name]: ((name == 'driverAssigned') ? JSON.parse(value) : value) } : row)\r\n            )\r\n        })\r\n    }\r\n    setRoute = (e) => {\r\n        const { value } = e.target\r\n        this.setState({\r\n            route: value\r\n        })\r\n        console.log(value)\r\n    }\r\n\r\n    createSchedule = () => {\r\n\r\n        //console.log(this.state.data);\r\n        const route = this.state.route;\r\n        const detail = this.state.data.map(d => ({ departureTime: d.departureTime, returnTime: d.returnTime, driverAssigned: d.driverAssigned.uid }));\r\n        let name = \"\";\r\n        if (this.state.data.length > 0) name = this.state.data.find(n => n.name != \"\").name;\r\n\r\n        if (!route) {\r\n            toast.error(\"Seleccione ruta.\");\r\n        }\r\n        controlService.post(\"/schedule\", { route, detail }).then((res) => {\r\n            // this.setState({ townList: res.data.town });\r\n            // this.setList({name: \"town\", value: res.data.town[0]._id });\r\n            this.setState({\r\n                data: []\r\n            })\r\n            toast.success(\"Horario creado correctamente.\");\r\n        }).catch(error => {\r\n            toast.error(error.data.msg);\r\n        });\r\n    }\r\n\r\n    getRoutes() {\r\n        controlService.get(\"/route\").then((res) => {\r\n            this.setState({ routeList: res.data.route });\r\n            this.setState({ route: res.data.route[0]._id });\r\n\r\n        }).catch(error => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    getSchedules() {\r\n        controlService.get(\"/schedule\").then((res) => {\r\n            this.setState({ scheduleList: res.data.schedules });\r\n\r\n\r\n        }).catch(error => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    getUserList() {\r\n        controlService.get(\"/usuarios\").then((res) => {\r\n            this.setState({ userList2: res.data.users });\r\n\r\n\r\n        }).catch(error => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n\r\n    editSchedules = (schedule) => {\r\n        const userList = this.state.userList2;\r\n        const editList= schedule.detail.map(\r\n            s => ({\r\n                ...s, \r\n                driverAssigned: {\r\n                    ...s.driverAssigned,\r\n                    uid:  s.driverAssigned._id\r\n                },  \r\n                userList,\r\n                errors: \"\"\r\n            }));\r\n        this.setState({ \r\n            btn: true,\r\n            data: editList,\r\n            scheduleId: schedule._id\r\n        })\r\n        console.log(editList);\r\n    }\r\n\r\n    getdriverAssigned= (id) => {\r\n        return this.userList2.find(user => user.uid = id);\r\n    }\r\n\r\n    scheduleModify= ()=>{\r\n        if (this.state.data.length <= 0 || this.state.scheduleId <= 0) {\r\n            toast.error(\"Ingrese horarios\");\r\n            return;\r\n        }\r\n        const detail = this.state.data.map(d => ({ departureTime: d.departureTime, returnTime: d.returnTime, driverAssigned: d.driverAssigned.uid }));\r\n\r\n        controlService.put(`/schedule/${this.state.scheduleId}`, {  detail }).then((res) => {\r\n            this.cleanForm();\r\n            toast.success(\"Horarios de bus modificados correctamente.\");\r\n        }).catch(error => {\r\n            toast.error(JSON.stringify(error.data.errors, null, 2));\r\n        });\r\n    }\r\n\r\n    scheduleDel = (schedule) =>{\r\n        controlService.del(`/schedule/${schedule._id}`).then((res) => {\r\n            this.cleanForm();\r\n            toast.warning(\"Horario de bus eliminado correctamente.\");\r\n        }).catch(error => {\r\n            toast.error(JSON.stringify(error.data.errors, null, 2));\r\n        });\r\n    }\r\n\r\n    cleanForm = ()=>{\r\n        this.setState({\r\n            data: [],\r\n            scheduleList: [],\r\n            btn: false\r\n\r\n        });\r\n        this.getSchedules();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"container\" >\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <Card>\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    <Col md={12}>\r\n\r\n                                        <Table striped bordered hover size=\"sm\">\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>#</th>\r\n                                                    <th>Ruta</th>\r\n                                                    <th>Editar</th>\r\n                                                    <th>Eliminar</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {\r\n                                                    this.state.scheduleList.map((schedule, i) => (\r\n                                                        <tr key={i}>\r\n                                                            <td key={i + 1}>{i + 1}</td>\r\n                                                            <td key={schedule.id}>{schedule.route.name}</td>\r\n                                                            <td><i className=\"material-icons btn btn-warning\"\r\n                                                                onClick={() => this.editSchedules(schedule)}>edit</i>\r\n                                                            </td>\r\n                                                            <td><i className=\"material-icons btn btn-danger\"\r\n                                                                onClick={() => this.scheduleDel(schedule)}>delete</i>\r\n                                                            </td>\r\n                                                        </tr>\r\n                                                    ))\r\n                                                }\r\n                                            </tbody>\r\n                                        </Table>\r\n                                    </Col>\r\n\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col md={6}>\r\n\r\n                                        <Form.Group as={Row} controlId=\"exampleForm.ControlSelect1\">\r\n                                            <Form.Label column sm=\"2\">Ruta</Form.Label>\r\n                                            <Col sm=\"10\">\r\n                                                <Form.Control as=\"select\"\r\n                                                    name=\"route\"\r\n                                                    onChange={\r\n                                                        this.setRoute\r\n                                                    } >\r\n                                                    {this.state.routeList.map(({ _id, name }, index) =>\r\n                                                        <option value={_id} key={index} > {name} </option>\r\n                                                    )}\r\n\r\n                                                </Form.Control>\r\n                                            </Col>\r\n\r\n\r\n                                        </Form.Group>\r\n\r\n                                    </Col>\r\n                                    <Col md={6}>\r\n                                        <Button variant=\"success\" onClick={this.createSchedule} disabled={this.state.btn | this.state.data.length < 1} >\r\n                                            Guardar\r\n                                        </Button>\r\n                                        <Button variant=\"warning\" onClick={this.scheduleModify} disabled={!this.state.btn } >\r\n                                            Editar\r\n                                        </Button>\r\n                                        <Button variant=\"secondary\" onClick={this.cleanForm}  >\r\n                                            Limpiar\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                                <div className=\"clearfix\"></div>\r\n                                <Row>\r\n                                    <Col md={6}>\r\n                                        <TableForm\r\n                                            addRow={this.addRow}\r\n\r\n                                        />\r\n                                    </Col>\r\n                                    <Col md={6}>\r\n                                        <Table2\r\n                                            headers={headers}\r\n                                            data={this.state.data}\r\n                                            handleRemove={this.handleRemove}\r\n                                            startEditing={this.startEditing}\r\n                                            editIdx={this.state.editIdx}\r\n                                            handleChange={this.handleChange}\r\n                                            stopEditing={this.stopEditing}\r\n\r\n                                        />\r\n                                    </Col>\r\n\r\n                                </Row>\r\n\r\n                            </Card.Body>\r\n\r\n                        </Card>\r\n\r\n                    </Col>\r\n                    <ToastContainer closeButton={false} position=\"bottom-right\" />\r\n                </Row>\r\n\r\n\r\n                {/* <li>{JSON.stringify(this.state.data, null, 2)}</li> */}\r\n\r\n\r\n            </div >\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default RegisterSchedule;\r\n","import api from './api';\r\n\r\nclass ControlService {\r\n    //get services\r\n    get( url ) {\r\n        return api.get(url);\r\n    }\r\n\r\n    //post services\r\n    post( url, body ) {\r\n        return api.post( url, body );\r\n    }\r\n\r\n    //put services\r\n    put( url, body ) {\r\n        return api.put( url, body );\r\n    }\r\n\r\n    //put services\r\n    del( url ) {\r\n        return api.delete( url );\r\n    }\r\n\r\n}\r\n\r\nexport default new ControlService();"],"sourceRoot":""}